var subprocessmanager, mxconfig = function () { function n() { } return (n.style = {}).start = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/event.png", n.style.end = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/event_end.png", n.style["start-timer"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/start_event_timer.png", n.style["end-timer"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/end_event_timer.png", n.style["start-message"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/message.png", n.style["end-message"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/end_event_message.png", n.style.intermediate = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/intermediate.png", n.style["intermediate-timer"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/intermediate_event_timer.png", n.style.subprocess = "rectangle", n.style["gateway-split"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/fork.png", n.style["gateway-join"] = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/merge.png", n.style.subprocess = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/subprocess.png", n.style.multipleinstance = "symbol;image=Scripts/mxGraph/src/editor/images/symbols/multiple_instance_task.png", n.getVertexStyle = function (e) { var t = null, r = e.type, i = e.trigger; if (r === kmodel.Config.NODE_TYPE_START) t = "Timer" === i ? n.style["start-timer"] : "Message" === i ? n.style["start-message"] : n.style.start; else if (r === kmodel.Config.NODE_TYPE_INTERMEDIATE) t = "Timer" === i ? n.style["intermediate-timer"] : n.style.intermediate; else if (r === kmodel.Config.NODE_TYPE_END) t = "Timer" === i ? n.style["end-timer"] : "Message" === i ? n.style["end-message"] : n.style.end; else if (r === kmodel.Config.NODE_TYPE_TASK) t = n.style.task; else if (r === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE) t = n.style.multipleinstance; else if (r === kmodel.Config.NODE_TYPE_GATEWAY) t = n.style["gateway-split"]; else { if (r !== kmodel.Config.NODE_TYPE_SUBPROCESS) throw new Error("未知节点类型！"); t = n.style.subprocess } return t }, n }(), mxfile = function () { function a() { } return a.getActivityObject = function (e, t) { var r = {}; return r.id = e.getAttribute("id"), "name" === t ? r.name = e.getAttribute("name") : "label" === t && (r.name = e.getAttribute("label")), r.code = e.getAttribute("code"), r }, a.setActivityTypeElement = function (e, t) { return t.type === kmodel.Config.NODE_TYPE_START || t.type === kmodel.Config.NODE_TYPE_INTERMEDIATE || t.type === kmodel.Config.NODE_TYPE_END ? (e.setAttribute("trigger", t.trigger), "Timer" === t.trigger && e.setAttribute("expression", t.expression)) : t.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE ? (e.setAttribute("complexType", t.complexType), e.setAttribute("mergeType", t.mergeType), e.setAttribute("compareType", t.compareType), e.setAttribute("completeOrder", t.completeOrder)) : t.type === kmodel.Config.NODE_TYPE_GATEWAY ? (e.setAttribute("gatewaySplitJoinType", t.gatewaySplitJoinType), e.setAttribute("gatewayDirection", t.gatewayDirection)) : t.type === kmodel.Config.NODE_TYPE_SUBPROCESS && e.setAttribute("subId", t.subId), e }, a.getActivityTypeObject = function (e, t) { return e.type = t.getAttribute("type"), e.type === kmodel.Config.NODE_TYPE_START || e.type === kmodel.Config.NODE_TYPE_END || e.type === kmodel.Config.NODE_TYPE_INTERMEDIATE ? (e.trigger = t.getAttribute("trigger"), "Timer" === e.trigger && (e.expression = t.getAttribute("expression"))) : e.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE ? (e.complexType = t.getAttribute("complexType"), e.mergeType = t.getAttribute("mergeType"), e.compareType = t.getAttribute("compareType"), e.completeOrder = t.getAttribute("completeOrder")) : e.type === kmodel.Config.NODE_TYPE_GATEWAY ? (e.gatewaySplitJoinType = t.getAttribute("gatewaySplitJoinType"), e.gatewayDirection = t.getAttribute("gatewayDirection")) : e.type === kmodel.Config.NODE_TYPE_SUBPROCESS && (e.subId = t.getAttribute("subId")), e }, a.setPerformersElement = function (e, t) { for (var r = e.createElement("Performers"), i = null, n = 0; n < t.length; n++)i = a.setPerformerElement(e, t[n]), r.appendChild(i); return r }, a.setPerformerElement = function (e, t) { var r = e.createElement("Performer"); return r.setAttribute("id", t.id), r }, a.getPerformerObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t }, a.setActionsElement = function (e, t) { for (var r = e.createElement("Actions"), i = 0; i < t.length; i++) { var n = e.createElement("Action"); n = a.setActionElement(n, t[i]), r.appendChild(n) } return r }, a.setActionElement = function (e, t) { return e.setAttribute("type", t.type), e.setAttribute("name", t.name), e.setAttribute("assembly", t.assembly), e.setAttribute("interface", t.interface), e.setAttribute("method", t.method), e }, a.getActionObject = function (e) { var t = {}; return t.type = e.getAttribute("type"), t.name = e.getAttribute("name"), t.assembly = e.getAttribute("assembly"), t.interface = e.getAttribute("interface"), t.method = e.getAttribute("method"), t }, a.setBoundariesElement = function (e, t) { for (var r = e.createElement("Boundaries"), i = 0; i < t.length; i++) { var n = e.createElement("Boundary"); n = a.setBoundaryElement(n, t[i]), r.appendChild(n) } return r }, a.setBoundaryElement = function (e, t) { return e.setAttribute("event", t.event), e.setAttribute("expression", t.expression), e }, a.getBoundaryObject = function (e) { var t = {}; return t.event = e.getAttribute("event"), t.expression = e.getAttribute("expression"), t }, a.setTransitionElement = function (e, t) { var r = e.createElement("Transition"); r.setAttribute("from", t.from), r.setAttribute("to", t.to); var i = e.createElement("Description"); r.appendChild(i); var n = e.createTextNode(t.description); return i.appendChild(n), r.setAttribute("label", t.description), r }, a.getTransitionObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t.from = e.getAttribute("from"), t.to = e.getAttribute("to"), t }, a.setConditionElement = function (e, t) { var r = e.createElement("Condition"); r.setAttribute("type", t.type); var i = e.createElement("ConditionText"); r.appendChild(i); var n = e.createTextNode($.trim(t.text)); return i.appendChild(n), r }, a.getConditionObject = function (e) { var t = {}; e && (t.type = e.getAttribute("type"), e.getElementsByTagName("ConditionText")[0] && (t.text = jshelper.replaceHTMLTags(e.textContent))); return t }, a.setReceiverElement = function (e, t) { var r = e.createElement("Receiver"); return r.setAttribute("type", t.type), r }, a.getReceiverObject = function (e) { var t = {}; if (e) { var r = e.getAttribute("type"); void 0 !== r && (t.type = r) } return t }, a.getGeographyEdgeObject = function (e) { var t = {}; t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"); var r = e.getElementsByTagName("Points")[0]; if (r) { var a = []; Array.prototype.forEach.call(r.getElementsByTagName("Point"), function (e) { var t, r, i, n = (r = (t = e).getAttribute("x"), i = t.getAttribute("y"), new mxPoint(parseInt(r), parseInt(i))); a.push(n) }), t.points = a } return t }, a.getGeographyVertexObject = function (e) { var t = {}; t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"); var r = e.getElementsByTagName("Widget")[0]; return r && (t.widget = a.getWidgetVertexObject(r)), t }, a.getWidgetVertexObject = function (e) { var t = {}; return t.left = parseInt(e.getAttribute("left")), t.top = parseInt(e.getAttribute("top")), t.width = parseInt(e.getAttribute("width")), t.height = parseInt(e.getAttribute("height")), t }, a.getParticipantObject = function (e) { var t = {}; return t.type = e.getAttribute("type"), t.id = e.getAttribute("id"), t.name = e.getAttribute("name"), t.code = e.getAttribute("code"), t.outerId = e.getAttribute("outerId"), t }, a.setParticipantElement = function (e, t) { var r = e.createElement("Participant"); return r.setAttribute("type", t.type), r.setAttribute("id", t.id), r.setAttribute("name", t.name), r.setAttribute("code", t.code), r.setAttribute("outerId", t.outerId), r }, a.getSwimlaneObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t.name = e.getAttribute("name"), t }, a.getGeographySwimlaneObject = function (e) { var t = {}; t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"); var r = e.getElementsByTagName("Widget")[0]; if (r) { var i = {}; i.left = parseInt(r.getAttribute("left")), i.top = parseInt(r.getAttribute("top")), i.width = parseInt(r.getAttribute("width")), i.height = parseInt(r.getAttribute("height")), t.widget = i } return t }, a.getGroupObject = function (e) { var t = {}; return t.id = e.getAttribute("id"), t.name = e.getAttribute("name"), t }, a.getGeographyGroupObject = function (e) { var t = {}; t.parent = e.getAttribute("parent"), t.style = e.getAttribute("style"); var r = e.getElementsByTagName("Widget")[0]; if (r) { var i = {}; i.left = parseInt(r.getAttribute("left")), i.top = parseInt(r.getAttribute("top")), i.width = parseInt(r.getAttribute("width")), i.height = parseInt(r.getAttribute("height")), t.widget = i } return t }, a }(), mxtoolkit = function () { function e() { } return e.insertSwimlane = function (e, t) { var r = mxUtils.createXmlDocument().createElement("Swimlane"); r.setAttribute("label", t.name); e.getModel(); var i = e.getDefaultParent(), n = t.geography, a = n.widget; return e.insertVertex(i, t.id, r, a.left, a.top, a.width, a.height, n.style) }, e.insertGroup = function (e, t) { var r = mxUtils.createXmlDocument().createElement("Group"); r.setAttribute("label", t.name); e.getModel(); var i = e.getDefaultParent(), n = t.geography, a = n.widget; return e.insertVertex(i, t.id, r, a.left, a.top, a.width, a.height, n.style) }, e.insertVertex = function (e, t) { var r = {}, i = {}, n = null; t.geography ? (i = (r = t.geography).widget, n = e.getModel().getCell(r.parent)) : (n = e.getDefaultParent(), i.left = 100, i.top = 100, i.width = 72, i.height = 32); return null !== r && null !== r.style && "null" !== r.style && void 0 !== r.style && "undefined" !== r.style || (r.style = mxconfig.getVertexStyle(t)), e.insertVertex(n, t.id, function (e) { var t = mxUtils.createXmlDocument(), r = t.createElement("Activity"); r.setAttribute("label", e.name), r.setAttribute("code", e.code); var i = t.createElement("Description"); r.appendChild(i); var n = t.createTextNode(e.description); i.appendChild(n); var a = t.createElement("ActivityType"); if (a.setAttribute("type", e.type), a = mxfile.setActivityTypeElement(a, e), r.appendChild(a), e.performers && 0 < e.performers.length) { var o = mxfile.setPerformersElement(t, e.performers); r.appendChild(o) } if (e.actions && 0 < e.actions.length) { var s = mxfile.setActionsElement(t, e.actions); r.appendChild(s) } if (e.boundaries && 0 < e.boundaries.length) { var l = mxfile.setBoundariesElement(t, e.boundaries); r.appendChild(l) } return r }(t), i.left, i.top, i.width, i.height, r.style) }, e.insertEdge = function (e, t) { var r = mxUtils.createXmlDocument(), i = mxfile.setTransitionElement(r, t); if (!1 === $.isEmptyObject(t.condition)) { var n = mxfile.setConditionElement(r, t.condition); i.appendChild(n) } if (!1 === $.isEmptyObject(t.receiver)) { var a = mxfile.setReceiverElement(r, t.receiver); i.appendChild(a) } var o = t.geography, s = e.getModel(), l = null; o && (l = s.getCell(o.parent)), l || (l = e.getDefaultParent()); var c = e.insertEdge(l, t.id, i, e.getModel().getCell(t.from), e.getModel().getCell(t.to)); return o && o.points && (c.geometry.points = o.points), c }, e }(), kmodel = function () { function e() { } return e.Config = { NODE_PREFIX: "ACT", NODE_TYPE_START: "StartNode", NODE_TYPE_INTERMEDIATE: "IntermediateNode", NODE_TYPE_END: "EndNode", NODE_TYPE_TASK: "TaskNode", NODE_TYPE_GATEWAY: "GatewayNode", NODE_TYPE_SUBPROCESS: "SubProcessNode", NODE_TYPE_MULTIPLEINSTANCE: "MultipleInstanceNode", NODE_TYPE_COMPLEX_SIGNTOGETHER: "SignTogether", NODE_TYPE_COMPLEX_SIGHFORWARD: "SignForward", ELEMENT_TYPE_NODE: "NODE", ELEMENT_TYPE_CONNECTION: "CONNECTION" }, e.GraphData = function (e) { this.package = e.package, this.process = e.package.process, this.yongdaos = function (e) { var t = null, r = []; if (e && 0 < e.length) { var i = kmain.mxGraphEditor.graph, n = i.getModel(); n.beginUpdate(); try { for (var a = 0; a < e.length; a++)t = mxtoolkit.insertSwimlane(i, e[a]), r.push(t) } finally { n.endUpdate() } } return r }(this.process.swimlanes), this.zuhes = function (e) { var t = null, r = []; if (e && 0 < e.length) { var i = kmain.mxGraphEditor.graph, n = i.getModel(); n.beginUpdate(); try { for (var a = 0; a < e.length; a++)t = mxtoolkit.insertGroup(i, e[a]), r.push(t) } finally { n.endUpdate() } } return r }(this.process.groups), this.nodes = function (e) { var t = null, r = []; if (e && 0 < e.length) { var i = kmain.mxGraphEditor.graph, n = i.getModel(); n.beginUpdate(); try { for (var a = 0; a < e.length; a++)t = mxtoolkit.insertVertex(i, e[a]), r.push(t) } finally { n.endUpdate() } } return r }(this.process.activities), this.lines = function (e) { var t = []; if (e && 0 < e.length) { var r = kmain.mxGraphEditor.graph, i = r.getModel(); i.beginUpdate(); try { for (var n = 0; n < e.length; n++)mxtoolkit.insertEdge(r, e[n]), t.push(null) } finally { i.endUpdate() } } return t }(this.process.transitions) }, e }(), processlist = function () { function i() { } return i.pselectedProcessEntity = null, i.afterCreated = new slick.Event, i.afterOpened = new slick.Event, i.getProcessList = function () { $("#loading-indicator").show(), jshelper.ajaxPost("api/Wf2Xml/GetProcessListSimple", null, function (e) { if (1 === e.Status) { var t = document.querySelector("#myProcessGrid"); $(t).empty(); var r = { columnDefs: [{ headerName: "ID", field: "ID", width: 50 }, { headerName: "流程GUID", field: "ProcessGUID", width: 120 }, { headerName: "流程名称", field: "ProcessName", width: 200 }, { headerName: "版本", field: "Version", width: 40 }, { headerName: "状态", field: "IsUsing", width: 40, cellRenderer: function (e) { return 1 == e.value ? "启用" : "禁用" } }, { headerName: "启动类型", field: "StartType", width: 80, cellRenderer: function (e) { var t = ""; 1 == e.value ? t = "定时" : 2 == e.value && (t = "邮件"); return t } }, { headerName: "启动表达式", field: "StartExpression", width: 140 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: function () { var e = r.api.getSelectedRows(); e.forEach(function (e, t) { i.pselectedProcessEntity = e }) }, onRowDoubleClicked: function (e, t) { i.editProcess() } }; new agGrid.Grid(t, r), r.api.setRowData(e.Entity), $("#loading-indicator").hide() } else $.msgBox({ title: "Designer / Process", content: e.Message, type: "error" }) }) }, i.createProcess = function () { i.pselectedProcessEntity = null, BootstrapDialog.show({ title: "流程新建", message: $("<div></div>").load("process/edit"), draggable: !0 }) }, i.loadProcess = function () { var e = i.pselectedProcessEntity; null !== e ? ($("#txtProcessGUID").val(e.ProcessGUID), $("#txtProcessName").val(e.ProcessName), $("#txtVersion").val(e.Version), $("#ddlIsUsing").val(e.IsUsing), $("#txtDescription").val(e.Description)) : ($("#txtProcessGUID").val(""), $("#txtProcessName").val(""), $("#txtVersion").val("1"), $("#ddlIsUsing").val(), $("#txtDescription").val("")) }, i.editProcess = function () { if (null == i.pselectedProcessEntity) return $.msgBox({ title: "Designer / Process", content: "请先选择流程记录！", type: "alert" }), !1; BootstrapDialog.show({ title: "流程编辑", message: $("<div></div>").load("process/edit"), draggable: !0 }) }, i.saveProcess = function () { if ("" == $("#txtProcessName").val() || "" == $("#txtVersion").val()) return $.msgBox({ title: "Designer / Process", content: "请输入流程基本信息！", type: "alert" }), !1; var e = { ProcessGUID: $("#txtProcessGUID").val(), ProcessName: $("#txtProcessName").val(), Version: $("#txtVersion").val(), IsUsing: $("#ddlIsUsing").val(), Description: $("#txtDescription").val() }; null === i.pselectedProcessEntity ? processapi.create(e, function (e) { 1 == e.Status && (i.pselectedProcessEntity = e.Entity, i.afterCreated && slick.trigger(i.afterCreated, { ProcessEntity: e.Entity })) }) : processapi.update(e) }, i.deleteProcess = function () { $.msgBox({ title: "Are You Sure", content: "确实要删除流程定义记录吗? ", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { if ("Yes" != e); else { var t = { ProcessGUID: i.pselectedProcessEntity.ProcessGUID, Version: i.pselectedProcessEntity.Version }; processapi.delete(t) } } }) }, i.sure = function () { var e; null !== i.pselectedProcessEntity && (e = i.pselectedProcessEntity, i.afterOpened && slick.trigger(i.afterOpened, { ProcessEntity: e })) }, i.openProcessDiagram = function (e) { var t = { ID: e }; processapi.queryProcessFileByID(t, function (e) { 1 === e.Status ? i.afterOpened && slick.trigger(i.afterOpened, { ProcessEntity: e.Entity }) : $.msgBox({ title: "Designer / Process", content: "流程定义记录读取失败！错误：" + e.Message, type: "error" }) }) }, i.initXmlImport = function () { new qq.FineUploader({ element: document.getElementById("fine-uploader-validation"), template: "qq-template-validation", request: { endpoint: "api/FineUpload/import", params: { extraParam1: "1", extraParam2: "2" } }, thumbnails: { placeholders: { waitingPath: "Content/fineuploader/waiting-generic.png", notAvailablePath: "Content/fineuploader/not_available-generic.png" } }, validation: { allowedExtensions: ["xml", "txt"], itemLimit: 1, sizeLimit: 51200 }, callbacks: { onComplete: function (e, t, r) { 1 == r.success ? $.msgBox({ title: "Designer / Process", content: r.Message, type: "info", buttons: [{ value: "Ok" }] }) : $.msgBox({ title: "Designer / Process", content: r.ExceptionMessage, type: "error", buttons: [{ value: "Ok" }] }) } } }) }, i }(), processapi = function () { function e() { } return e.create = function (e, t) { jshelper.ajaxPost("api/Wf2Xml/CreateProcess", JSON.stringify(e), function (e) { 1 == e.Status ? $.msgBox({ title: "Designer / Process", content: "新创建流程记录成功保存！", type: "info" }) : $.msgBox({ title: "Designer / Process", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }), t(e) }) }, e.update = function (e) { jshelper.ajaxPost("api/Wf2Xml/UpdateProcess", JSON.stringify(e), function (e) { 1 == e.Status ? $.msgBox({ title: "Designer / Process", content: "流程记录成功保存！", type: "info" }) : $.msgBox({ title: "Ooops", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e.delete = function (e) { jshelper.ajaxPost("api/Wf2Xml/DeleteProcess", JSON.stringify(e), function (e) { 1 == e.Status ? ($.msgBox({ title: "Designer / Process", content: "流程记录已经删除！", type: "info" }), processlist.getProcessList()) : $.msgBox({ title: "Ooops", content: e.Message, type: "error", buttons: [{ value: "Ok" }] }) }) }, e.queryProcessFile = function (e, t) { jshelper.ajaxPost("api/Wf2Xml/QueryProcessFile", JSON.stringify(e), function (e) { t(e) }) }, e.queryProcessFileByID = function (e, t) { jshelper.ajaxPost("api/Wf2Xml/QueryProcessFileByID", JSON.stringify(e), function (e) { t(e) }) }, e.saveProcessFile = function (e) { jshelper.ajaxPost("api/Wf2Xml/SaveProcessFile", JSON.stringify(e), function (e) { "1" == e.Status ? $.msgBox({ title: "Designer / Index", content: "流程XML内容保存成功！", type: "info" }) : $.msgBox({ title: "Designer / Index", content: "流程XML内容保存失败！错误信息：" + e.Message, type: "info" }) }) }, e.getSchedule = function () { }, e }(), rolelist = function () { function e() { } var i = "", n = null; return e.getRoleList = function () { jshelper.ajaxPost("api/Wf2Xml/GetRoleAll", null, function (e) { if (1 == e.Status) { var t = document.querySelector("#myRoleGrid"), r = { columnDefs: [{ headerName: "ID", field: "ID", width: 60 }, { headerName: "角色名称", field: "RoleName", width: 200 }, { headerName: "角色代码", field: "RoleCode", width: 200 }], rowSelection: "single", onSelectionChanged: function () { r.api.getSelectedRows().forEach(function (e, t) { i = "role", n = e }) } }; new agGrid.Grid(t, r), r.api.setRowData(e.Entity) } }) }, e.sure = function () { "" != i && null != n ? activityproperty.syncActivityPerformers(i, n) : $.msgBox({ title: "Designer / Role", content: "请选择角色记录！", type: "alert" }) }, e }(); subprocessmanager || (subprocessmanager = {}), function () { var i = null, n = null; subprocessmanager.load = function () { var e = kmain.mxSelectedDomElement.ElementObject; null !== e && "" !== e.subId && ($("#txtProcessGUID").val(e.subId), subprocessmanager.getProcess(e.subId)), subprocessmanager.getProcessList() }, subprocessmanager.getProcessList = function () { $("#spinner").show(), jshelper.ajaxPost("api/Wf2Xml/GetProcessListSimple", null, function (e) { if (1 === e.Status) { var t = document.querySelector("#mySubProcessGrid"), r = { columnDefs: [{ headerName: "ID", field: "ID", width: 50 }, { headerName: "流程GUID", field: "ProcessGUID", width: 120 }, { headerName: "流程名称", field: "ProcessName", width: 160 }, { headerName: "版本", field: "Version", width: 40 }, { headerName: "状态", field: "IsUsing", width: 60 }, { headerName: "创建日期", field: "CreatedDateTime", width: 120 }], rowSelection: "single", onSelectionChanged: function () { var e = r.api.getSelectedRows(); e.forEach(function (e, t) { e.ID, i = e.ProcessGUID, n = e.ProcessName }) }, onRowDoubleClicked: function (e, t) { } }; new agGrid.Grid(t, r), r.api.setRowData(e.Entity), $("#loading-indicator").hide() } else $.msgBox({ title: "Designer / SubProcess", content: e.Message, type: "error" }) }) }, subprocessmanager.getProcess = function (e) { if (null != e) { var t = { ProcessGUID: e }; jshelper.ajaxPost("api/Wf2Xml/GetProcess", JSON.stringify(t), function (e) { if (1 == e.Status) { var t = e.Entity; $("#txtProcessName").val(t.ProcessName) } }) } }, subprocessmanager.saveSubProcess = function () { $.msgBox({ title: "Are You Sure", content: "请确认要将当前选中记录设置为子流程吗？！", type: "confirm", buttons: [{ value: "Yes" }, { value: "Cancel" }], success: function (e) { if ("Yes" != e); else { $("#txtProcessGUID").val(i), $("#txtProcessName").val(n); var t = kmain.mxSelectedDomElement.ElementObject; t && (t.subId = i, kmain.setVertexValue(t)) } } }) } }(); var activityproperty = function () { function n() { } function d(e) { var t = document.querySelector("#myPerformerGrid"); $(t).empty(); var r = { columnDefs: [{ headerName: "ID", field: "id", width: 160 }, { headerName: "角色名称", field: "name", width: 160 }, { headerName: "角色代码", field: "code", width: 160 }], rowSelection: "single", onSelectionChanged: function () { r.api.getSelectedRows().forEach(function (e, t) { n.mselectedActivityPerformerGUID = e.id }) } }; new agGrid.Grid(t, r); var i = function (e) { var t = null, r = []; if (e.performers && 0 < e.performers.length) for (var i = 0; i < e.performers.length; i++)(t = a(e.performers[i].id)) && r.push(t); return r }(e); r.api.setRowData(i) } function a(e) { var t = null, r = kmain.mxSelectedParticipants; if (r && 0 < r.length) for (var i = 0; i < r.length; i++) { var n = r[i]; if (e === n.id) { t = { id: n.id, name: n.name, code: n.code, outerId: n.outerId }; break } } return t } return n.mselectedActivityPerformerGUID = "", n.loadActivity = function () { $("#ddlComplexType").prop("selectedIndex", -1), $("#ddlMergeType").prop("selectedIndex", -1), $("#ddlCompareType").prop("selectedIndex", -1); var e = kmain.mxSelectedDomElement.ElementObject; e && ($("#txtActivityName").val(e.name), $("#txtActivityCode").val(e.code), $("#txtDescription").val(e.description), d(e), function (e) { var t = e.actions; if (t && 0 < t.length) { var r = t[0]; $("#txtActionName").val(r.name), $("#txtActionAssembly").val(r.assembly), $("#txtActionInterface").val(r.interface), $("#txtActionMethod").val(r.method) } }(e), function (e) { var t = e.boundaries; if (window.console.log(e), t && 0 < t.length) { var r = t[0]; window.console.log(r), $("#txtDeadline").val(r.expression) } }(e), e.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE ? ($("#divMultipleInstanceContent").show(), $("#tabDelay").hide(), $("#ddlComplexType").val(e.complexType), $("#ddlMergeType").val(e.mergeType), $("#ddlCompareType").val(e.compareType), $("#txtCompleteOrder").val(e.completeOrder)) : ($("#divMultipleInstanceContent").hide(), $("#tabDelay").show())) }, n.saveActivity = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), r = $("#txtDescription").val(), i = kmain.mxSelectedDomElement.ElementObject; if (i) { i.name = e, i.code = t, i.description = r, i.actions = []; var n = { type: "ExternalMethod" }; n.name = $("#txtActionName").val(), n.assembly = $("#txtActionAssembly").val(), n.interface = $("#txtActionInterface").val(), n.method = $("#txtActionMethod").val(), i.actions.push(n), i.boundaries = []; var a = { event: "Timer" }; a.expression = $("#txtDeadline").val(), i.boundaries.push(a), i.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE && (i.complexType = $("#ddlComplexType").val(), i.mergeType = $("#ddlMergeType").val(), i.compareType = $("#ddlCompareType").val(), i.completeOrder = $("#txtCompleteOrder").val()), kmain.setVertexValue(i) } }, n.addPerformer = function () { BootstrapDialog.show({ title: "角色列表", message: $("<div></div>").load("role/list"), draggable: !0 }) }, n.syncActivityPerformers = function (e, t) { var r = kmain.mxSelectedDomElement.ElementObject, i = r.performers; i || (i = r.performers = []); var n = null; if (null != kmain.mxSelectedParticipants) for (var a = kmain.mxSelectedParticipants, o = 0; o < a.length; o++)if ("role" === e && "Role" === a[o].type && t.ID === a[o].outerId) { n = a[o]; break } if (n) { var s = !1; for (o = 0; o < i.length; o++)if (n.id === i[o].id) { s = !0; break } if (s) $.msgBox({ title: "Desinger / ActivityProperty", content: "要添加的角色或用户数据已经存在！", type: "info" }); else { var l = { id: n.id, name: n.name, code: n.code, outerId: n.outerId }; r.performers.push(l), d(r), kmain.setVertexPerformers(r.performers) } } else if ("role" === e) { var c = { id: jshelper.getUUID(), type: "Role", name: t.RoleName, code: t.RoleCode, outerId: t.ID }; kmain.mxSelectedParticipants.push(c); l = { id: c.id, name: c.name, code: c.code, outerId: c.outerId }; r.performers.push(l), d(r), kmain.setVertexPerformers(r.performers) } }, n.delPerformer = function () { var t = n.mselectedActivityPerformerGUID, e = kmain.mxSelectedDomElement.ElementObject, r = e.performers; e.performers = jQuery.grep(r, function (e) { return e.id !== t }), d(e), kmain.setVertexPerformers(e.performers) }, n }(), cronmanager = function () { function e() { } return e.saveCron = function () { var e = $("#cronExpressionValue").text(); $("#txtCronExpression").val(e) }, e }(), eventproperty = function () { function e() { } return e.loadEvent = function () { var e = kmain.mxSelectedDomElement.ElementObject; e && ($("#txtActivityName").val(e.name), $("#txtActivityCode").val(e.code), $("#txtDescription").val(e.description), $("#txtCronExpression").val(e.expression)) }, e.editCron = function () { var e = $("#txtCronExpression").val(); BootstrapDialog.show({ title: "CRON表达式编辑", message: $("<div></div>").load("cron/edit"), data: { expression: e }, draggable: !0, onshown: function (e) { var t = this.data.expression; setTimeout(function () { t && "null" !== t && ($("#cronExpressionValue").html(t), $.syncCronExpression(t), $.updateCronExpression(), $.updateCronGui()) }, 200) } }) }, e.saveEvent = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), r = $("#txtDescription").val(), i = kmain.mxSelectedDomElement.ElementObject; i && (i.name = e, i.code = t, i.description = r, i.expression = $("#txtCronExpression").val(), kmain.setVertexValue(i)) }, e.loadEndEvent = function () { var e = kmain.mxSelectedDomElement.ElementObject; e && ($("#txtActivityName").val(e.name), $("#txtActivityCode").val(e.code), $("#txtDescription").val(e.description), $("#txtDeadline").val(e.expression)) }, e.saveEndEvent = function () { var e = $("#txtActivityName").val(), t = $("#txtActivityCode").val(), r = $("#txtDescription").val(), i = kmain.mxSelectedDomElement.ElementObject; i && (i.name = e, i.code = t, i.description = r, i.expression = $("#txtDeadline").val(), kmain.setVertexValue(i)) }, e }(), gatewayproperty = function () { function i() { } return i.splitOptions = [{ value: "AndSplit", text: "与分支" }, { value: "OrSplit", text: "或分支" }, { value: "AndSplitMI", text: "与分支(多实例)" }, { value: "OrSplitMI", text: "或分支(多实例)" }], i.joinOptions = [{ value: "AndJoin", text: "与合并" }, { value: "OrJoin", text: "或合并" }, { value: "AndJoinMI", text: "与合并(多实例)" }, { value: "OrJoinMI", text: "或合并(多实例)" }], i.loadGatewayInformation = function () { var e = kmain.mxSelectedDomElement.ElementObject; if (e && ($("#txtGatewayName").val(e.name), $("#txtDescription").val(e.description), e.gatewaySplitJoinType)) { var t = e.gatewaySplitJoinType; $("#ddlGatewayType").val(t), $("#ddlGatewayType").attr("disabled", !0), i.appendDirectionType(t), e.gatewayDirection && $("#ddlDirectionType").val(e.gatewayDirection) } $("#ddlGatewayType").change(function () { var e = $("#ddlGatewayType").val(); i.appendDirectionType(e) }) }, i.appendDirectionType = function (e) { $("#ddlDirectionType").empty().append('<option value="default" selected>--请选择--</option>'); var t = null; if ("Split" == e) for (var r = 0; r < i.splitOptions.length; r++)t = i.splitOptions[r], $("#ddlDirectionType").append($("<option></option>").attr("value", t.value).text(t.text)); else if ("Join" == e) for (r = 0; r < i.joinOptions.length; r++)t = i.joinOptions[r], $("#ddlDirectionType").append($("<option></option>").attr("value", t.value).text(t.text)) }, i.saveGatewayInformation = function () { var e = $("#txtGatewayName").val(), t = $("#txtDescription").val(), r = $("#ddlGatewayType").val(), i = $("#ddlDirectionType").val(); if ("default" != r) if ("default" != i) { var n = kmain.mxSelectedDomElement.ElementObject; n && (n.name = e, n.description = t, n.gatewaySplitJoinType = r, n.gatewayDirection = i, kmain.setVertexValue(n)) } else $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并的子类型！", type: "info" }); else $.msgBox({ title: "Designer / GatewayProperty", content: "请重新选择分支合并类型！", type: "info" }) }, i }(), transitionproperty = function () { function e() { } return e.load = function () { var e = kmain.mxSelectedDomElement.ElementObject; e && ($("#txtDescription").val(e.description), e.receiver && e.receiver.type && $("#ddlReceiverType").val(e.receiver.type), e.condition && $("#txtCondition").val($.trim(e.condition.text))) }, e.save = function () { var e = $("#txtDescription").val(), t = {}, r = $("#ddlReceiverType").val(); "default" !== r && (t.type = r); var i = { type: "Expression" }; i.text = $.trim($("#txtCondition").val()); var n = kmain.mxSelectedDomElement.ElementObject; null !== n && (n.description = e, n.receiver = t, n.condition = i, kmain.setEdgeValue(n)) }, e }(), kloader = function () { function e() { } function g(e, t) { for (var r = !0, i = 0; i < e.length; i++) { if (e[i].id === t) { r = !1; break } } return r } function u(e, t) { for (var r = null, i = 0; i < e.length; i++) { var n = e[i]; if (n.id === t) { (r = {}).type = n.type, r.id = n.id, r.name = n.name, r.code = n.code, r.outerId = n.outerId; break } } return r } function p(e, t, r, i) { var n, a, o = null, s = null, l = null, c = null, d = e.createElement("Activity"); if (t.appendChild(d), d.setAttribute("id", r.id), d.setAttribute("name", i.getAttribute("label")), d.setAttribute("code", i.getAttribute("code")), a = i.getElementsByTagName("Description")[0]) { var m = e.createElement("Description"); if (d.appendChild(m), "undefined" !== a.textContent) { var p = e.createTextNode(jshelper.escapeHtml(a.textContent)); m.appendChild(p) } } n = (o = i.getElementsByTagName("ActivityType")[0]).getAttribute("type"); var g = e.createElement("ActivityType"); if (d.appendChild(g), g.setAttribute("type", n), n === kmodel.Config.NODE_TYPE_START || n === kmodel.Config.NODE_TYPE_END || n === kmodel.Config.NODE_TYPE_INTERMEDIATE) { var u = o.getAttribute("trigger"); if (g.setAttribute("trigger", u), "Timer" === u) { var f = o.getAttribute("expression"); g.setAttribute("expression", f), n === kmodel.Config.NODE_TYPE_START ? (kmain.mxSelectedProcessStartType = 1, kmain.mxSelectedProcessStartExpression = f) : n === kmodel.Config.NODE_TYPE_END && (kmain.mxSelectedProcessEndType = 1, kmain.mxSelectedProcessEndExpression = f) } else kmain.mxSelectedProcessStartType = 0, kmain.mxSelectedProcessStartExpression = "" } else "GatewayNode" == n ? (g.setAttribute("gatewaySplitJoinType", o.getAttribute("gatewaySplitJoinType")), g.setAttribute("gatewayDirection", o.getAttribute("gatewayDirection"))) : "SubProcessNode" == n ? g.setAttribute("subId", o.getAttribute("subId")) : "MultipleInstanceNode" == n && (g.setAttribute("complexType", o.getAttribute("complexType")), g.setAttribute("mergeType", o.getAttribute("mergeType")), g.setAttribute("compareType", o.getAttribute("compareType")), g.setAttribute("completeOrder", o.getAttribute("completeOrder"))); if (s = i.getElementsByTagName("Performers")[0]) { var y = s.getElementsByTagName("Performer"); if (0 < y.length) { var v = e.createElement("Performers"); d.appendChild(v); for (var E = 0; E < y.length; E++) { var h = y[E], x = e.createElement("Performer"); v.appendChild(x), x.setAttribute("id", h.getAttribute("id")) } } } if (l = i.getElementsByTagName("Actions")[0]) { var b = l.getElementsByTagName("Action"); if (0 < b.length) { var A = e.createElement("Actions"); d.appendChild(A); for (var T = 0; T < b.length; T++) { var P = b[T], D = e.createElement("Action"); A.appendChild(D), D.setAttribute("type", P.getAttribute("type")), D.setAttribute("name", P.getAttribute("name")), D.setAttribute("assembly", P.getAttribute("assembly")), D.setAttribute("interface", P.getAttribute("interface")), D.setAttribute("method", P.getAttribute("method")) } } } if (c = i.getElementsByTagName("Boundaries")[0]) { var C = c.getElementsByTagName("Boundary"); if (0 < C.length) { var N = e.createElement("Boundaries"); d.appendChild(N); for (var S = 0; S < C.length; S++) { var w = C[S], $ = e.createElement("Boundary"); N.appendChild($), $.setAttribute("event", w.getAttribute("event")), $.setAttribute("expression", w.getAttribute("expression")) } } } var O = e.createElement("Geography"); d.appendChild(O), O.setAttribute("parent", r.parent.id), O.setAttribute("style", r.style); var I = e.createElement("Widget"); O.appendChild(I), I.setAttribute("left", r.geometry.x), I.setAttribute("top", r.geometry.y), I.setAttribute("width", r.geometry.width), I.setAttribute("height", r.geometry.height) } function d(e, t, r, i) { var n = null, a = null; if (0 < i.length) for (var o = 0; o < i.length; o++)n = i[o], "Transition" === (a = r.getValue(n)).nodeName && s(e, t, n, a) } function s(i, e, t, r) { var n = null, a = "", o = null, s = "", l = null, c = i.createElement("Transition"); if (e.appendChild(c), c.setAttribute("id", t.id), c.setAttribute("from", t.source.id), c.setAttribute("to", t.target.id), descriptionNode = r.getElementsByTagName("Description")[0], descriptionNode) { var d = i.createElement("Description"); if (c.appendChild(d), "undefined" !== descriptionNode.textContent) { var m = i.createTextNode(jshelper.escapeHtml(descriptionNode.textContent)); d.appendChild(m) } } if (n = r.getElementsByTagName("Receiver")[0]) { var p = i.createElement("Receiver"); c.appendChild(p), a = n.getAttribute("type"), !1 === $.isEmptyObject(a) && "undefined" !== a && "null" !== a && p.setAttribute("type", a) } if (o = r.getElementsByTagName("Condition")[0]) { var g = i.createElement("Condition"); if (c.appendChild(g), s = o.getAttribute("type"), !1 === $.isEmptyObject(s) && "undefined" !== s && (g.setAttribute("type", s), l = o.getElementsByTagName("ConditionText")[0], !1 === $.isEmptyObject(l))) { var u = i.createElement("ConditionText"); g.appendChild(u); var f = $.trim(l.textContent); if ("" !== f) { var y = i.createCDATASection(f); u.appendChild(y) } } } var v = i.createElement("Geography"); c.appendChild(v), v.setAttribute("parent", t.parent.id), v.setAttribute("style", t.style); var E = t.geometry.points; if (E) { var h = i.createElement("Points"); v.appendChild(h), $.each(E, function (e, t) { var r = i.createElement("Point"); h.appendChild(r), r.setAttribute("x", t.x), r.setAttribute("y", t.y) }) } } return e.load = function (e) { var t = {}, r = {}, i = []; t.participants = i, t.process = r; var n = e.XmlContent, a = mxUtils.parseXml(n); Array.prototype.forEach.call(a.getElementsByTagName("Participant"), function (e) { var t = mxfile.getParticipantObject(e); i.push(t) }); var o = a.getElementsByTagName("Process")[0]; if (o) { var l = [], s = [], c = [], d = []; r.name = o.getAttribute("name"), r.id = o.getAttribute("id"); var m = o.getElementsByTagName("Description")[0]; m && (r.description = jshelper.replaceHTMLTags(m.textContent)); var p = a.documentElement.getElementsByTagName("Layout")[0]; if (p) { var g = p.getElementsByTagName("Swimlanes")[0]; g && Array.prototype.forEach.call(g.getElementsByTagName("Swimlane"), function (e) { var t = mxfile.getSwimlaneObject(e), r = e.getElementsByTagName("Geography")[0]; r && (t.geography = mxfile.getGeographySwimlaneObject(r)), c.push(t) }); var u = p.getElementsByTagName("Groups")[0]; u && Array.prototype.forEach.call(u.getElementsByTagName("Group"), function (e) { var t = mxfile.getGroupObject(e), r = e.getElementsByTagName("Geography")[0]; r && (t.geography = mxfile.getGeographyGroupObject(r)), d.push(t) }) } r.swimlanes = c, r.groups = d, r.activities = l, r.transitions = s, Array.prototype.forEach.call(o.getElementsByTagName("Activity"), function (e) { var t, r = {}, i = [], n = [], a = []; r = mxfile.getActivityObject(e, "name"); var o = e.getElementsByTagName("Description")[0]; o && (r.description = jshelper.replaceHTMLTags(o.textContent)); var s = e.getElementsByTagName("ActivityType")[0]; r = mxfile.getActivityTypeObject(r, s), Array.prototype.forEach.call(e.getElementsByTagName("Performer"), function (e) { var t = mxfile.getPerformerObject(e); i.push(t) }), r.performers = i, Array.prototype.forEach.call(e.getElementsByTagName("Action"), function (e) { var t = mxfile.getActionObject(e); n.push(t) }), r.actions = n, Array.prototype.forEach.call(e.getElementsByTagName("Boundary"), function (e) { var t = mxfile.getBoundaryObject(e); a.push(t) }), r.boundaries = a, (t = e.getElementsByTagName("Geography")[0]) && (r.geography = mxfile.getGeographyVertexObject(t)), l.push(r) }), Array.prototype.forEach.call(a.getElementsByTagName("Transition"), function (e) { var t = mxfile.getTransitionObject(e), r = e.getElementsByTagName("Description")[0]; r && (t.description = jshelper.replaceHTMLTags(r.textContent)); var i = e.getElementsByTagName("Receiver")[0]; i && (t.receiver = mxfile.getReceiverObject(i)); var n = e.getElementsByTagName("Condition")[0]; n && (t.condition = mxfile.getConditionObject(n)); var a = e.getElementsByTagName("Geography")[0]; a && (t.geography = mxfile.getGeographyEdgeObject(a)), s.push(t) }) } var f = { processGUID: e.ProcessGUID, version: e.Version, package: t }; return new kmodel.GraphData(f) }, e.serialize2Xml = function (e, t) { if (!e) return null; var r = mxUtils.parseXml('<?xml version="1.0" encoding="utf-8"?><Package></Package>'), i = r.documentElement, n = kmain.mxGraphEditor.graph.getModel(); !function (e, t, r) { var i = e.createElement("Participants"); if (t.appendChild(i), r) for (var n = 0; n < r.length; n++) { var a = r[n], o = mxfile.setParticipantElement(e, a); i.appendChild(o) } }(r, i, function (e, t) { var r = null, i = [], n = t.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), a = null, o = null, s = null, l = null, c = null, d = ""; if (0 < n.length) for (var m = 0; m < n.length; m++)if (a = n[m], o = t.getValue(a), s = o.getElementsByTagName("Performers")[0]) { var l = s.getElementsByTagName("Performer"); if (0 < l.length) for (var p = 0; p < l.length; p++)c = l[p], d = c.getAttribute("id"), !0 === g(i, d) && (r = u(e, d), i.push(r)) } return i }(t, n)); var a, o, s, l, c = function (e, t, r) { var i = e.createElement("WorkflowProcesses"); t.appendChild(i); var n = e.createElement("Process"); i.appendChild(n), n.setAttribute("name", r.ProcessName), n.setAttribute("id", r.ProcessGUID); var a = e.createElement("Description"); n.appendChild(a); var o = e.createTextNode(jshelper.escapeHtml(r.Description)); return a.appendChild(o), n }(r, i, e); return o = i, s = n, l = (a = r).createElement("Layout"), o.appendChild(l), function (e, t, r) { var i = e.createElement("Swimlanes"); t.appendChild(i); for (var n = r.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), a = 0; a < n.length; a++) { var o = n[a], s = r.getValue(o); if ("Swimlane" === s.nodeName) { var l = e.createElement("Swimlane"); i.appendChild(l), l.setAttribute("id", o.id), l.setAttribute("name", s.getAttribute("label")); var c = e.createElement("Geography"); l.appendChild(c), c.setAttribute("parent", o.parent.id), c.setAttribute("style", o.style); var d = e.createElement("Widget"); c.appendChild(d), d.setAttribute("left", o.geometry.x), d.setAttribute("top", o.geometry.y), d.setAttribute("width", o.geometry.width), d.setAttribute("height", o.geometry.height) } } }(a, l, s), function (e, t, r) { var i = e.createElement("Groups"); t.appendChild(i); for (var n = r.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), a = 0; a < n.length; a++) { var o = n[a], s = r.getValue(o); if ("Group" === s.nodeName) { var l = e.createElement("Group"); i.appendChild(l), l.setAttribute("id", o.id), l.setAttribute("name", s.getAttribute("label")); var c = e.createElement("Geography"); l.appendChild(c), c.setAttribute("parent", o.parent.id), o.style ? c.setAttribute("style", o.style) : c.setAttribute("style", "verticalAlign=top;"); var d = e.createElement("Widget"); c.appendChild(d), d.setAttribute("left", o.geometry.x), d.setAttribute("top", o.geometry.y), d.setAttribute("width", o.geometry.width), d.setAttribute("height", o.geometry.height) } } }(a, l, s), function (e, t, r) { var i = r.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), n = null, a = null, o = null, s = null; if (0 < i.length) { var l = e.createElement("Activities"); t.appendChild(l); for (var c = 0; c < i.length; c++) { if (n = i[c], "Activity" === (a = r.getValue(n)).nodeName && p(e, l, n, a), "Swimlane" === a.nodeName) for (var d = r.getChildVertices(r.getCell(n.id)), m = 0; m < d.length; m++)o = d[m], "Activity" === (s = r.getValue(o)).nodeName ? p(e, l, o, s) : window.console.log("invalid node type:" + s.nodeName); if (a.nodeName = "Group") for (var d = r.getChildVertices(r.getCell(n.id)), m = 0; m < d.length; m++)o = d[m], "Activity" === (s = r.getValue(o)).nodeName ? p(e, l, o, s) : window.console.log("invalid node type:" + s.nodeName) } } }(r, c, n), function (e, t, r) { var i = e.createElement("Transitions"); t.appendChild(i); var n = r.getChildEdges(kmain.mxGraphEditor.graph.getDefaultParent()); d(e, i, r, n); for (var a = null, o = function (e) { for (var t = [], r = e.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), i = null, n = 0; n < r.length; n++)i = r[n], "Swimlane" === e.getValue(i).nodeName && t.push(i.id); return t }(r), s = 0; s < o.length; s++)a = r.getChildEdges(r.getCell(o[s])), d(e, i, r, a); for (var l = null, c = function (e) { for (var t = [], r = e.getChildVertices(kmain.mxGraphEditor.graph.getDefaultParent()), i = null, n = 0; n < r.length; n++)i = r[n], "Group" === e.getValue(i).nodeName && t.push(i.id); return t }(r), s = 0; s < c.length; s++)l = r.getChildEdges(r.getCell(c[s])), d(e, i, r, l) }(r, c, n), vkbeautify.xml(mxUtils.getXml(r, " ")) }, e }(), kmain = function () { function m() { } function i() { m.mxSelectedProcessEntity = null, m.mxSelectedDomElement = {}, m.mxSelectedPackageData = null, m.mxSelectedParticipants = [], m.mxSelectedProcessStartType = 0, m.mxSelectedProcessStartExpression = "", m.mxSelectedProcessEndType = 0, m.mxSelectedProcessEndExpression = "" } function r(e) { var t = null; try { if (mxClient.isBrowserSupported()) { mxObjectCodec.allowEval = !0; var r = mxUtils.load(e).getDocumentElement(); t = new mxEditor(r), mxObjectCodec.allowEval = !1, t.graph.createPanningManager = function () { var e = new mxPanningManager(this); return e.border = 30, e }, t.graph.allowAutoPanning = !0, t.graph.timerAutoScroll = !0; var i = document.title, n = function (e) { document.title = i }; t.addListener(mxEvent.OPEN, n), t.addListener(mxEvent.ROOT, n), n(), t.setStatus("mxGraph " + mxClient.VERSION) } else $.msgBox({ title: "Designer / Index", content: "不支持当前版本的浏览器，请使用更新版本的浏览器！", type: "info" }) } catch (e) { throw $.msgBox({ title: "Designer / Index", content: "图形设计器启动异常：" + e.message, type: "info" }), e } return t } function t(e, t) { i(), m.mxSelectedProcessEntity = t.ProcessEntity, m.saveProcessFile() } function n(e, r) { i(); var t = { ProcessGUID: r.ProcessEntity.ProcessGUID, Version: r.ProcessEntity.Version }; processapi.queryProcessFile(t, function (e) { if (1 === e.Status) { m.mxGraphEditor.graph.getModel().clear(); var t = kloader.load(e.Entity); m.mxSelectedPackageData = t.package, m.mxSelectedParticipants = t.package.participants, m.mxSelectedProcessEntity = r.ProcessEntity } else $.msgBox({ title: "Designer / Process", content: "流程定义记录读取失败！错误：" + e.Message, type: "error" }) }) } m.init = function (e) { !function () { $(".progress .progress-bar").progressbar({ transition_delay: 200 }); var e = $(".js-loading-bar"); e.find(".bar"); e.modal("show"), setTimeout(function () { e.modal("hide") }, 500) }(), $("#kgraphCanvas").on("click", function (e) { $(this).focus() }), $.fn.modal.Constructor.prototype.enforceFocus = function () { }, void 0 !== processlist && (processlist.afterCreated.subscribe(t), processlist.afterOpened.subscribe(n)) }, m.showDiagramReadOnly = function () { m.mxGraphEditor = r("Scripts/mxGraph/src/editor/config/workfloweditor-readonly.xml") }, m.initializeMxGraphEditor = function () { var e = m.mxGraphEditor = r("Scripts/mxGraph/src/editor/config/workfloweditor.xml"), t = m.mxGraphEditor.graph; e.addListener(mxEvent.SAVE, function () { m.saveProcessFile() }), t.addListener(mxEvent.CELLS_ADDED, function (e) { }), t.addMouseListener({ mouseDown: function (e, t) { }, mouseMove: function (e, t) { }, mouseUp: function (e, t) { } }), t.connectionHandler.addListener(mxEvent.CONNECT, function (e, t) { }), e.createProperties = function (e) { if (void 0 !== m.mxSelectedDomElement) { var t = this.graph.getModel(), r = t.getValue(e); if (mxUtils.isNode(r)) if (m.mxSelectedDomElement.Cell = e, t.isVertex(e)) if ("Activity" === r.nodeName) m.mxSelectedDomElement.ElementType = "Activity", function (e) { if (e.type === kmodel.Config.NODE_TYPE_TASK || e.type === kmodel.Config.NODE_TYPE_MULTIPLEINSTANCE) BootstrapDialog.show({ title: "活动属性", message: $("<div></div>").load("activity/edit"), data: { node: e }, draggable: !0 }); else if (e.type === kmodel.Config.NODE_TYPE_GATEWAY) BootstrapDialog.show({ title: "网关决策属性", message: $("<div></div>").load("activity/gateway"), data: { node: e }, draggable: !0 }); else if (e.type === kmodel.Config.NODE_TYPE_SUBPROCESS) BootstrapDialog.show({ title: "子流程属性", message: $("<div></div>").load("activity/subprocess"), data: { node: e }, draggable: !0 }); else if (e.type === kmodel.Config.NODE_TYPE_START || e.type === kmodel.Config.NODE_TYPE_INTERMEDIATE) BootstrapDialog.show({ title: "事件属性", message: $("<div></div>").load("activity/event"), data: { node: e }, draggable: !0 }); else { if (e.type !== kmodel.Config.NODE_TYPE_END) return $.msgBox({ title: "Designer / Property", content: "未知节点类型！" + e.type, type: "alert" }); BootstrapDialog.show({ title: "事件属性", message: $("<div></div>").load("activity/endevent"), data: { node: e }, draggable: !0 }) } }(m.mxSelectedDomElement.Element = function (e) { var t = m.mxGraphEditor.graph.getModel().getValue(e), r = mxfile.getActivityObject(t, "label"), i = t.getElementsByTagName("Description")[0]; i && (r.description = i.textContent); var n = t.getElementsByTagName("ActivityType")[0]; r = mxfile.getActivityTypeObject(r, n); var a = t.getElementsByTagName("Performers")[0]; if (a) { var o = []; Array.prototype.forEach.call(a.getElementsByTagName("Performer"), function (e) { var t = mxfile.getPerformerObject(e); o.push(t) }), r.performers = o } var s = t.getElementsByTagName("Actions")[0]; if (s) { var l = []; Array.prototype.forEach.call(s.getElementsByTagName("Action"), function (e) { var t = mxfile.getActionObject(e); l.push(t) }), r.actions = l } var c = t.getElementsByTagName("Boundaries")[0]; if (c) { var d = []; Array.prototype.forEach.call(c.getElementsByTagName("Boundary"), function (e) { var t = mxfile.getBoundaryObject(e); d.push(t) }), r.boundaries = d } return r }(e)); else "Swimlane" === r.nodeName && $.msgBox({ title: "Designer / Property", content: "暂无属性定义，请直接拖到节点到泳道！", type: "info" }); else if (t.isEdge(e)) { if ("Transition" === r.nodeName) { m.mxSelectedDomElement.ElementType = "Transition"; var i = m.mxSelectedDomElement.Element = function (e) { var t = m.mxGraphEditor.graph.getModel().getValue(e), r = mxfile.getTransitionObject(t), i = t.getElementsByTagName("Description")[0]; i && (r.description = i.textContent); var n = t.getElementsByTagName("Condition")[0]; n && (r.condition = mxfile.getConditionObject(n)); var a = t.getElementsByTagName("Receiver")[0]; return r.receiver = mxfile.getReceiverObject(a), r }(e); BootstrapDialog.show({ title: "转移属性", message: $("<div></div>").load("transition/edit"), data: { node: i }, draggable: !0 }) } } else $.msgBox({ title: "Designer / Property", content: "请选择节点或连线进行属性编辑！", type: "alert" }); else $.msgBox({ title: "Designer / Property", content: "请选择节点或连线进行属性编辑！", type: "alert" }) } else $.msgBox({ title: "Designer / Property", content: "请确认打开流程记录后再进行编辑！", type: "alert" }) }, e.showAdvanced = function (e) { window.console.log("show advanced...in kmain") } }, m.createProcess = function () { m.mxGraphEditor.graph.getModel().clear(), processlist.createProcess() }, m.openProcess = function () { BootstrapDialog.show({ title: "流程列表", message: $("<div></div>").load("process/list"), draggable: !0 }) }, m.setting = function () { BootstrapDialog.show({ title: "系统参数设置", message: $("<div>你可以在这个页面设置一些参数。。。</div>"), buttons: [{ label: "确定", cssClass: "btn-primary", action: function (e) { e.close() } }] }) }, m.previewXml = function () { var e = kloader.serialize2Xml(m.mxSelectedProcessEntity, m.mxSelectedParticipants); if (!1 === $.isEmptyObject(e)) { var t = $("<div></div>"); $('<textarea style="width:540px;min-height:280px;"/>').val(e).appendTo(t); BootstrapDialog.show({ title: "XML文件内容", message: t, buttons: [{ label: "关闭", cssClass: "btn-primary", action: function (e) { e.close() } }], draggable: !0 }) } else $.msgBox({ title: "Designer / Index", content: "图形内容为空，请确认是否打开流程记录！", type: "error" }) }, m.importDiagram = function () { BootstrapDialog.show({ title: "导入XML", message: $("<div></div>").load("process/import"), draggable: !0 }) }, m.saveProcessFile = function () { if (m.mxSelectedProcessEntity) { var e = kloader.serialize2Xml(m.mxSelectedProcessEntity, m.mxSelectedParticipants), t = { ProcessGUID: m.mxSelectedProcessEntity.ProcessGUID, Version: m.mxSelectedProcessEntity.Version, StartType: m.mxSelectedProcessStartType, StartExpression: m.mxSelectedProcessStartExpression, EndType: m.mxSelectedProcessEndType, EndExpression: m.mxSelectedProcessEndExpression, XmlContent: e }; processapi.saveProcessFile(t) } else processlist.createProcess() }, m.previewMxGraphXMLContent = function () { var e = m.mxGraphEditor.graph.getModel(), t = (new mxCodec).encode(e), r = mxUtils.getPrettyXml(t); if (!1 === $.isEmptyObject(r)) { var i = $("<div></div>"); $('<textarea style="width:540px;min-height:280px;"/>').val(r).appendTo(i); BootstrapDialog.show({ title: "XML文件内容", message: i, buttons: [{ label: "关闭", cssClass: "btn-primary", action: function (e) { e.close() } }], draggable: !0 }) } else $.msgBox({ title: "Designer / Index", content: "图形内容为空，请确认是否打开流程记录！", type: "error" }) }, m.setVertexValue = function (e) { var t = m.mxGraphEditor.graph.getModel(), r = t.getValue(m.mxSelectedDomElement.Cell); r.setAttribute("label", e.name), r.setAttribute("code", e.code); var i = r.getElementsByTagName("Description")[0]; i || (i = r.appendChild(r.ownerDocument.createElement("Description"))), i.textContent = e.description; var n = r.getElementsByTagName("ActivityType")[0]; n = mxfile.setActivityTypeElement(n, e); var a = r.getElementsByTagName("Actions")[0]; a || (a = r.appendChild(r.ownerDocument.createElement("Actions"))); var o = a.getElementsByTagName("Action")[0]; if (o || (o = a.appendChild(a.ownerDocument.createElement("Action"))), e.actions) { var s = e.actions[0]; o = mxfile.setActionElement(o, s) } var l = r.getElementsByTagName("Boundaries")[0]; l || (l = r.appendChild(r.ownerDocument.createElement("Boundaries"))); var c = l.getElementsByTagName("Boundary")[0]; if (c || (c = l.appendChild(l.ownerDocument.createElement("Boundary"))), e.boundaries) { var d = e.boundaries[0]; c = mxfile.setBoundaryElement(c, d) } t.beginUpdate(); try { t.setValue(m.mxSelectedDomElement.Cell, r) } finally { t.endUpdate() } }, m.setVertexPerformers = function (e) { var t = m.mxGraphEditor.graph.getModel(), r = t.getValue(m.mxSelectedDomElement.Cell); if (e) { var i = r.getElementsByTagName("Performers")[0]; i ? s(i) : i = r.appendChild(r.ownerDocument.createElement("Performers")); for (var n = null, a = null, o = 0; o < e.length; o++)n = e[o], a = mxfile.setPerformerElement(i.ownerDocument, n), i.appendChild(a) } t.beginUpdate(); try { t.setValue(m.mxSelectedDomElement.Cell, r) } finally { t.endUpdate() } }; var s = function (e) { for (var t; t = e.lastChild;)e.removeChild(t) }; return m.setEdgeValue = function (e) { var t = m.mxGraphEditor.graph.getModel(), r = t.getValue(m.mxSelectedDomElement.Cell), i = r.getElementsByTagName("Description")[0]; if (i || (i = r.appendChild(r.ownerDocument.createElement("Description"))), i.textContent = e.description, r.setAttribute("label", e.description), r.setAttribute("from", e.from), r.setAttribute("to", e.to), e.condition) { var n = r.getElementsByTagName("Condition")[0]; n || (n = r.appendChild(r.ownerDocument.createElement("Condition"))), n.setAttribute("type", e.condition.type); var a = n.getElementsByTagName("ConditionText")[0]; a || (a = n.appendChild(r.ownerDocument.createElement("ConditionText"))), a.textContent = e.condition.text } var o = r.getElementsByTagName("Receiver")[0]; o || (o = r.appendChild(r.ownerDocument.createElement("Receiver"))), o.setAttribute("type", e.receiver.type), t.beginUpdate(); try { t.setValue(m.mxSelectedDomElement.Cell, r) } finally { t.endUpdate() } }, m.renderReadyTasks = function (e) { var r = m.mxGraphEditor.graph, i = m.mxGraphEditor.graph.getModel(); i.beginUpdate(); try { $.each(e, function (e, t) { i.getCell(t.ActivityGUID).setStyle("strokeColor=green;fillColor=green;"), r.refresh() }) } finally { i.endUpdate() } }, m.renderCompletedTransitions = function (e) { var s = m.mxGraphEditor.graph, l = m.mxGraphEditor.graph.getModel(); l.beginUpdate(); try { $.each(e, function (e, t) { var r = l.getCell(t.TransitionGUID); if (void 0 !== r) { var i = s.getCellStyle(r), n = s.stylesheet.getCellStyle("html=1;rounded=1;jettySize=auto;orthogonalLoop=1;strokeColor=red;strokeWidth=2;", i), a = []; for (var o in n) a.push(o + "=" + n[o]); r.style = a.join(";"), s.refresh() } }) } finally { l.endUpdate() } }, m }();
