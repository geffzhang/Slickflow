<mxEditor defaultGroup="group" defaultEdge="transition"
	helpWindowImage="Scripts/mxGraph/src/editor/images/help.gif"
	tasksWindowImage="Scripts/mxGraph/src/editor/images/tasks.gif"
	forcedInserting="0"
	swimlaneRequired="0">
	<include name="Scripts/mxGraph/src/editor/config/editor-commons.xml"/>
	<add as="onInit">
		function ()
		{
			this.showTasks();
		}
	</add>
	<Array as="cycleAttributeValues">
		<add value="#83027F"/>
		<add value="#66B922"/>
		<add value="#808913"/>
		<add value="#CF0056"/>
		<add value="#4679B6"/>
	</Array>
	<Array as="templates">
		<add as="group">
			<Group label="" description="" href="">
				<mxCell vertex="1" style="group" connectable="0"/>
			</Group>
		</add>
    <add as="edge">
      <Edge label="" from="" to="">
        <Description></Description>
        <mxCell edge="1">
          <mxGeometry as="geometry" relative="1"/>
        </mxCell>
      </Edge>
    </add>
   <add as="transition">
      <Transition label="" from="" to="">
        <Description></Description>
        <Condition type="">
          <ConditionText></ConditionText>
        </Condition>
        <Receiver type="Default"></Receiver>
        <GroupBehaviours priority="" forced=""/>
        <mxCell edge="1">
          <mxGeometry as="geometry" relative="1"/>
        </mxCell>
      </Transition>
    </add>
    <add as="message">
      <Message label="" from="" to="">
        <Description></Description>
        <mxCell edge="1" style="message">
          <mxGeometry as="geometry" relative="1"/>
        </mxCell>
      </Message>
    </add>
    <!--<add as="pool">
      <Pool label="Pool" description="" href="">
        <mxCell vertex="1" style="pool" connectable="0">
          <mxGeometry as="geometry" width="300" height="160"/>
        </mxCell>
      </Pool>
    </add>-->
		<add as="swimlane">
			<Swimlane label="Swimlane" type="" description="" href="">
				<mxCell vertex="1" style="swimlane" connectable="0">
					<mxGeometry as="geometry" width="300" height="160"/>
				</mxCell>
			</Swimlane>
		</add>
		<add as="task">
      <Activity label="Task" name="" code="">
        <Description></Description>
        <ActivityType type="TaskNode"/>
        <Performers></Performers>
        <Actions></Actions>
        <Boundaries></Boundaries>
        <mxCell vertex="1">	
					<mxGeometry as="geometry" width="72" height="32"/>
				</mxCell>
			</Activity>
		</add>
    <add as="servicetask">
      <Activity label="Service" name="" code="">
        <Description></Description>
        <ActivityType type="ServiceNode"/>
        <Performers></Performers>
        <Services></Services>
        <Boundaries></Boundaries>
        <mxCell vertex="1" style="symbol;image=images/symbols/service_task.png">
          <mxGeometry as="geometry" width="72" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="multipleinstance">
      <Activity label="MultipleInstance" name="" code="">
        <Description></Description>
        <ActivityType type="MultipleInstanceNode" complexType="" mergeType="" compareType="" completeOrder=""/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=images/symbols/multiple_instance_task.png">
          <mxGeometry as="geometry" width="72" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="subprocess">
      <Activity label="Subprocess"  name="" code="">
        <Description></Description>
        <ActivityType type="SubProcessNode"  subId="" subType="" subVar="" />
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=images/symbols/subprocess.png">
          <mxGeometry as="geometry" width="72" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="start">
      <Activity label="Start" name="" code="">
        <Description></Description>
        <ActivityType type="StartNode" trigger="None"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/event.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="end">
      <Activity label="End" name="" code="">
        <Description></Description>
        <ActivityType type="EndNode" trigger="None"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/event_end.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="start-timer">
      <Activity label="TimerStart" name="" code="">
        <Description></Description>
        <ActivityType type="StartNode" trigger="Timer"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/start_event_timer.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="intermediate-timer">
      <Activity label="TimerDelay" name="" code="">
        <Description></Description>
        <ActivityType type="IntermediateNode" trigger="Timer"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/intermediate_event_timer.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="end-timer">
      <Activity label="TimerEnd" name="" code="">
        <Description></Description>
        <ActivityType type="EndNode" trigger="Timer"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/end_event_timer.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="start-message-catch">
      <Activity label="StartMessageCatch" name="" code="">
        <Description></Description>
        <ActivityType type="StartNode" trigger="Message" messageDirection="Catch"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/message.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="start-message-throw">
      <Activity label="StartMessageThrow" name="" code="">
        <Description></Description>
        <ActivityType type="StartNode" trigger="Message" messageDirection="Throw"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/message_throw.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="end-message-catch">
      <Activity label="EndMessageCatch" name="" code="">
        <Description></Description>
        <ActivityType type="EndNode" trigger="Message" messageDirection="Catch"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/message_end.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="end-message-throw">
      <Activity label="EndMessageThrow" name="" code="">
        <Description></Description>
        <ActivityType type="EndNode" trigger="Message" messageDirection="Throw"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/message_end_throw.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="intermediate">
      <Activity label="InteEvent" name="" code="">
        <Description></Description>
        <ActivityType type="IntermediateNode" trigger="None"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/event_intermediate.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="intermediate-message-catch">
      <Activity label="InterMessageCatch" name="" code="">
        <Description></Description>
        <ActivityType type="IntermediateNode" trigger="Message" messageDirection="Catch"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/message_intermediate.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="intermediate-message-throw">
      <Activity label="InterMessageThrow" name="" code="">
        <Description></Description>
        <ActivityType type="IntermediateNode" trigger="Message" messageDirection="Throw"/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/message_intermediate.png">
          <mxGeometry as="geometry" width="32" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="gateway-split">
      <Activity label="gateway-split" name="" code="">
        <Description></Description>
        <ActivityType type="GatewayNode" gatewaySplitJoinType="Split" gatewayDirection=""/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/fork.png">
          <mxGeometry as="geometry" width="72" height="32"/>
        </mxCell>
      </Activity>
    </add>
    <add as="gateway-join">
      <Activity label="gateway-join" name="" code="">
        <Description></Description>
        <ActivityType type="GatewayNode" gatewaySplitJoinType="Join" gatewayDirection="" gatewayJoinPass=""/>
        <Performers></Performers>
        <Actions></Actions>
        <mxCell vertex="1" style="symbol;image=Scripts/mxGraph/src/editor/images/symbols/merge.png">
          <mxGeometry as="geometry" width="72" height="32"/>
        </mxCell>
      </Activity>
    </add>
		<add as="shape">
			<Shape label="" description="" href="">
				<mxCell vertex="1" style="ellipse">		
					<mxGeometry as="geometry" width="32" height="32"/>
				</mxCell>
			</Shape>
		</add>
		<add as="symbol">
			<Symbol label="Symbol" description="" href="">
				<mxCell vertex="1" style="symbol;image=images/symbols/event.png">		
					<mxGeometry as="geometry" width="32" height="32"/>
				</mxCell>
			</Symbol>
		</add>
	</Array>
	<add as="createTasks">
            <![CDATA[
		function (div)
		{
			var off = 30;
			
			if (this.graph != null)
			{
				var layer = this.graph.model.root.getChildAt(0);
				mxUtils.para(div,  mxResources.get('processList'));
				mxUtils.linkInvoke(div, mxResources.get('newDiagram'), kmain,
					'createProcess', '', off);
				mxUtils.br(div);
        mxUtils.linkInvoke(div, mxResources.get('openDiagram'), kmain,
					'openProcess', '', off);
				mxUtils.br(div);
        mxUtils.linkInvoke(div, mxResources.get('saveDiagram'), kmain,
					'saveProcessFile', '', off);
				mxUtils.br(div);
				mxUtils.linkInvoke(div, mxResources.get('previewXml'), kmain,
					'previewXml', '', off);
				mxUtils.br(div);
        mxUtils.linkInvoke(div, mxResources.get('importDiagram'), kmain,
					'importDiagram', '', off);
				mxUtils.br(div);
				
				if (!this.graph.isSelectionEmpty())
				{
					var cell = this.graph.getSelectionCell();
					if (this.graph.getSelectionCount() == 1 &&
						(this.graph.model.isVertex(cell) &&
						cell.getEdgeCount() > 0) || this.graph.isSwimlane(cell))
					{
						mxUtils.para(div, 'Layout');
						mxUtils.linkAction(div, mxResources.get('verticalTree'),
							this, 'verticalTree', off);
						mxUtils.br(div);
						mxUtils.linkAction(div, mxResources.get('horizontalTree'),
							this, 'horizontalTree', off);
						mxUtils.br(div);
					}
					
					mxUtils.para(div, 'Format');
					
					if (mxUtils.isNode(cell.value, 'Symbol'))
					{
						mxUtils.linkAction(div, mxResources.get('image'),
							this, 'image', off);
						mxUtils.br(div);
					}
					else
					{
						mxUtils.linkAction(div, mxResources.get('opacity'),
							this, 'opacity', off);
						mxUtils.br(div);
						if (this.graph.model.isVertex(cell) ||
							(cell.style != null && 
							cell.style.indexOf("arrowEdge") >= 0))
						{
							mxUtils.linkAction(div, mxResources.get('gradientColor'),
								this, 'gradientColor', off);
							mxUtils.br(div);
						}
						if (this.graph.model.isEdge(cell))
						{
							mxUtils.linkAction(div, 'Straight Connector', this, 'straightConnector', off);
							mxUtils.br(div);
							mxUtils.linkAction(div, 'Elbow Connector', this, 'elbowConnector', off);
							mxUtils.br(div);
							mxUtils.linkAction(div, 'Arrow Connector', this, 'arrowConnector', off);
							mxUtils.br(div);
						}
					}
					
					mxUtils.linkAction(div, 'Rounded', this, 'toggleRounded', off);
					mxUtils.br(div);
					if (this.graph.isSwimlane(cell) || this.graph.model.isEdge(cell))
					{
						mxUtils.linkAction(div, 'Orientation', this, 'toggleOrientation', off);
						mxUtils.br(div);
					}
					
					if (this.graph.getSelectionCount() > 1)
					{
						mxUtils.para(div, mxResources.get('align'));
						mxUtils.linkAction(div, mxResources.get('left'),
							this, 'alignCellsLeft', off);
						mxUtils.br(div);
						mxUtils.linkAction(div, mxResources.get('center'),
							this, 'alignCellsCenter', off);
						mxUtils.br(div);
						mxUtils.linkAction(div, mxResources.get('right'),
							this, 'alignCellsRight', off);
						mxUtils.br(div);
						mxUtils.linkAction(div, mxResources.get('top'),
							this, 'alignCellsTop', off);
						mxUtils.br(div);
						mxUtils.linkAction(div, mxResources.get('middle'),
							this, 'alignCellsMiddle', off);
						mxUtils.br(div);
						mxUtils.linkAction(div, mxResources.get('bottom'),
							this, 'alignCellsBottom', off);
						mxUtils.br(div);
					}
					
					mxUtils.para(div, mxResources.get('selection'));
					mxUtils.linkAction(div, mxResources.get('clearSelection'),
						this, 'selectNone', off);
					mxUtils.br(div);
				}
				else if (layer.getChildCount() > 0)
				{
					mxUtils.para(div, mxResources.get('selection'));
					mxUtils.linkAction(div, mxResources.get('selectAll'),
						this, 'selectAll', off);
					mxUtils.br(div);
				}
				
				mxUtils.br(div);
			}
		}
	]]></add>
</mxEditor>
